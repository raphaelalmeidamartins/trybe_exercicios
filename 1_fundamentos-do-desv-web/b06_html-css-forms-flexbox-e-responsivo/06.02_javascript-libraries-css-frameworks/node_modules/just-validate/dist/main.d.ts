import { EventListenerInterface, FieldConfigInterface, FieldRuleInterface, GlobalConfigInterface, GroupFieldInterface, GroupFieldsInterface, GroupFieldType, GroupRuleInterface, FieldInterface, FieldsInterface, LocaleInterface, TooltipPositionType, TooltipInstance, ElemValueType } from './modules/interfaces';
declare class JustValidate {
    form: HTMLFormElement | null;
    fields: FieldsInterface;
    groupFields: GroupFieldsInterface;
    errors: {
        [key: string]: {
            message?: string;
        };
    };
    isValid: boolean;
    isSubmitted: boolean;
    globalConfig: GlobalConfigInterface;
    errorLabels: HTMLDivElement[];
    eventListeners: EventListenerInterface[];
    dictLocale: LocaleInterface[];
    currentLocale?: string;
    customStyleTags: {
        [id: string]: HTMLStyleElement;
    };
    onSuccessCallback?: (event: Event) => void;
    onFailCallback?: (fields: FieldsInterface) => void;
    tooltips: TooltipInstance[];
    lastScrollPosition?: number;
    isScrollTick?: boolean;
    constructor(form: string | Element, globalConfig?: Partial<GlobalConfigInterface>, dictLocale?: LocaleInterface[]);
    initialize(form: string | Element, globalConfig?: Partial<GlobalConfigInterface>, dictLocale?: LocaleInterface[]): void;
    refreshAllTooltips: () => void;
    handleDocumentScroll: () => void;
    getLocalisedString(str?: string): string;
    getFieldErrorMessage(fieldRule: FieldRuleInterface): string;
    getGroupErrorMessage(groupRule: GroupRuleInterface): string;
    setFieldInvalid(field: string, fieldRule: FieldRuleInterface): void;
    setGroupInvalid(groupName: string, groupRule: GroupRuleInterface): void;
    setGroupValid(groupName: string): void;
    getElemValue(elem: HTMLInputElement): ElemValueType;
    validateGroupRule(groupName: string, type: GroupFieldType, elems: HTMLInputElement[], groupRule: GroupRuleInterface): Promise<any> | void;
    validateFieldRule(field: string, elem: HTMLInputElement, fieldRule: FieldRuleInterface, afterInputChanged?: boolean): Promise<any> | void;
    validateField(fieldName: string, field: FieldInterface, afterInputChanged?: boolean): Promise<any> | void;
    validateGroup(groupName: string, group: GroupFieldInterface): Promise<any> | void;
    focusInvalidField(): void;
    afterSubmitValidation(): void;
    validate(): Promise<any>;
    formSubmitHandler: (ev: Event) => void;
    setForm(form: HTMLFormElement): void;
    handleFieldChange: (target: HTMLInputElement) => void;
    handleGroupChange: (target: HTMLInputElement) => void;
    handlerChange: (ev: Event) => void;
    addListener(type: string, elem: HTMLInputElement | Document | HTMLFormElement, handler: (ev: Event) => void): void;
    removeListener(type: string, elem: HTMLInputElement | Document | HTMLFormElement, handler: (ev: Event) => void): void;
    addField(field: string, rules: FieldRuleInterface[], config?: FieldConfigInterface): JustValidate;
    removeField(field: string): JustValidate;
    addRequiredGroup(groupField: string, errorMessage?: string, config?: FieldConfigInterface): JustValidate;
    getListenerType(type: string): "input" | "change" | "keyup";
    setListeners(elem: HTMLInputElement): void;
    clearErrors(): void;
    isTooltip(): boolean;
    lockForm(): void;
    unlockForm(): void;
    renderTooltip(elem: HTMLElement, errorLabel: HTMLDivElement, position?: TooltipPositionType): TooltipInstance;
    createErrorLabelElem(name: string, errorMessage: string, config?: FieldConfigInterface): HTMLDivElement;
    renderErrors(): void;
    destroy(): void;
    refresh(): void;
    setCurrentLocale(locale?: string): void;
    onSuccess(callback: (ev?: Event) => void): JustValidate;
    onFail(callback: (fields: FieldsInterface) => void): JustValidate;
}
export default JustValidate;
